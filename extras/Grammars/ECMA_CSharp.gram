/**********************************************************************
* Copyright (c) 2014 Laurent Wouters and others
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General
* Public License along with this program.
* If not, see <http://www.gnu.org/licenses/>.
*
* Contributors:
*     Laurent Wouters - lwouters@xowl.org
**********************************************************************/

grammar CSharp
{
	options
	{
		Axiom = "compilation_unit";
		Separator = "SEPARATOR";
	}
	terminals
	{
		// A.1.1 Line terminators
		NEW_LINE		-> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+0085 // Next line character
						|  U+2028 // Line separator character
						|  U+2029 ; //Paragraph separator character (U+2029)

		// A.1.2 White space
		WHITE_SPACE		-> uc{Zs} | U+0009 | U+000B | U+000C ;

		// A.1.3 Comments
		COMMENT_LINE	-> '//' (.* - (.* NEW_LINE .*)) NEW_LINE ;
		COMMENT_BLOCK	-> '/*' (.* - (.* '*/' .*)) '*/' ;

		// A.1.6 Identifiers
		// IDENTIFIER_CHAR		-> uc{Lu} | uc{Ll} | uc{Lt} | uc{Lm} | uc{Lo} | uc{Nl} ;
		// IDENTIFIER			-> '@'? (IDENTIFIER_CHAR | '_') (IDENTIFIER_CHAR | '_' | uc{Nd} | uc{Pc} | uc{Cf})* ;
		// We use the following simplified rule instead to reduce the lexer's size
		IDENTIFIER			-> '@'? [a-zA-Z_] [a-zA-Z0-9_]* ;

		// A.1.8 Literals
		INTEGER_LITERAL_DECIMAL		-> ('0' | [1-9] [0-9]*) ([Uu] [Ll]? | [Ll] [Uu]? )? ;
		INTEGER_LITERAL_HEXA		-> '0' [xX] [a-fA-F0-9]+ ([Uu] [Ll]? | [Ll] [Uu]? )? ;

		REAL_LITERAL				-> ('0' | [1-9] [0-9]*)? '.' ('0' | [1-9] [0-9]*) ([eE] ('+'|'-')? ('0' | [1-9] [0-9]*))? [FfDdMm]?
									|  ('0' | [1-9] [0-9]*) ([eE] ('+'|'-')? ('0' | [1-9] [0-9]*)) [FfDdMm]?
									|  ('0' | [1-9] [0-9]*) [FfDdMm] ;
		CHARACTER_LITERAL			-> '\'' ( (. - ('\'' | '\\' | NEW_LINE))
											| '\\' ('\'' | '"' | '\\' | [0abfnrtv])
											| '\\' 'x' [a-fA-F0-9] [a-fA-F0-9]? [a-fA-F0-9]? [a-fA-F0-9]?
											| '\\' [uU] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] ([a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9])?
										) '\'' ;
		REGULAR_STRING_LITERAL		-> '"'  ( (. - ('"' | '\\' | NEW_LINE))
											| '\\' ('\'' | '"' | '\'' | '\\' | [0abfnrtv])
											| '\\' 'x' [a-fA-F0-9] [a-fA-F0-9]? [a-fA-F0-9]? [a-fA-F0-9]?
											| '\\' [uU] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] ([a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9])?
										)* '"' ;
		VERBATIM_STRING_LITERAL		-> '@' '"' ([^"] | '""')* '"' ;

		// A.1.10 Pre-Processing Directives
		PP_DIRECTIVES	-> WHITE_SPACE* '#' (.* - (.* NEW_LINE .*)) NEW_LINE ;

		SEPARATOR		-> (NEW_LINE | WHITE_SPACE | COMMENT_LINE | COMMENT_BLOCK | PP_DIRECTIVES)+;
	}
	rules
	{
		// A.1.7 Keywords
		keyword		-> 'abstract'
					|  'byte'
					|  'class'
					|  'delegate'
					|  'event'
					|  'fixed'
					|  'if'
					|  'internal'
					|  'new'
					|  'override'
					|  'readonly'
					|  'short'
					|  'struct'
					|  'try'
					|  'unsafe'
					|  'volatile'
					|  'as'
					|  'case'
					|  'const'
					|  'do'
					|  'explicit'
					|  'float'
					|  'implicit'
					|  'is'
					|  'null'
					|  'params'
					|  'ref'
					|  'sizeof'
					|  'switch'
					|  'typeof'
					|  'ushort'
					|  'while'
					|  'base'
					|  'catch'
					|  'continue'
					|  'double'
					|  'extern'
					|  'for'
					|  'in'
					|  'lock'
					|  'object'
					|  'private'
					|  'return'
					|  'stackalloc'
					|  'this'
					|  'uint'
					|  'using'
					|  'bool'
					|  'char'
					|  'decimal'
					|  'else'
					|  'false'
					|  'foreach'
					|  'int'
					|  'long'
					|  'operator'
					|  'protected'
					|  'sbyte'
					|  'static'
					|  'throw'
					|  'ulong'
					|  'virtual'
					|  'break'
					|  'checked'
					|  'default'
					|  'enum'
					|  'finally'
					|  'goto'
					|  'interface'
					|  'namespace'
					|  'out'
					|  'public'
					|  'sealed'
					|  'string'
					|  'true'
					|  'unchecked'
					|  'void' ;

		// A.1.8 Literals
		literal			-> 'true' | 'false'
						|  INTEGER_LITERAL_DECIMAL | INTEGER_LITERAL_HEXA
						|  REAL_LITERAL
						|  CHARACTER_LITERAL
						|  REGULAR_STRING_LITERAL | VERBATIM_STRING_LITERAL
						|  'null' ;

		// A.1.9 Operators and punctuators
		right_shift						-> '>' '>' ;
		right_shift_assignment			-> '>' '>=' ;

		// A.2.1 Basic concepts
		compilation_unit				-> extern_alias_directives? using_directives? global_attributes? namespace_member_declarations? ;
		namespace_name					-> namespace_or_type_name ;
		type_name						-> namespace_or_type_name ;
		namespace_or_type_name			-> IDENTIFIER type_argument_list?
										|  qualified_alias_member
										|  namespace_or_type_name '.' IDENTIFIER type_argument_list? ;

		// A.2.2 Types
		type			-> value_type
						|  reference_type
						|  type_parameter ;
		value_type		-> struct_type
						|  enum_type ;
		struct_type		-> type_name
						|  simple_type
						|  nullable_type ;
		simple_type		-> numeric_type
						|  'bool' ;
		numeric_type	-> integral_type
						|  floating_point_type
						|  'decimal' ;
		integral_type	-> 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' ;
		floating_point_type -> 'float' | 'double' ;
		enum_type		-> type_name ;
		nullable_type	-> non_nullable_value_type '?' ;
		non_nullable_value_type -> enum_type
								|  type_name
								|  simple_type ;
		reference_type	-> class_type
						|  interface_type
						|  array_type
						|  delegate_type ;
		class_type		-> type_name
						|  'object'
						|  'string' ;
		interface_type	-> type_name ;
		array_type		-> non_array_type rank_specifiers ;
		non_array_type	-> value_type
						|  class_type
						|  interface_type
						|  delegate_type
						|  type_parameter ;
		rank_specifiers	-> rank_specifier+ ;
		rank_specifier	-> '[' dim_separators? ']' ;
		dim_separators	-> ','+ ;
		delegate_type	-> type_name ;

		// A.2.3 Variables
		variable_reference	-> expression ;

		// A.2.4 Expressions
		argument_list						-> argument (',' argument)* ;
		argument							-> expression
											|  'ref' variable_reference
											|  'out' variable_reference ;
		primary_expression					-> array_creation_expression | primary_noarray_creation_expression ;
		primary_noarray_creation_expression -> literal
											|  simple_name
											|  parenthesized_expression
											|  member_access
											|  invocation_expression
											|  element_access
											|  this_access
											|  base_access
											|  post_increment_expression
											|  post_decrement_expression
											|  object_creation_expression
											|  delegate_creation_expression
											|  typeof_expression
											|  checked_expression
											|  unchecked_expression
											|  default_value_expression
											|  anonymous_method_expression ;
		simple_name							-> IDENTIFIER type_argument_list? ;
		parenthesized_expression			-> '(' expression ')' ;
		member_access						-> primary_expression '.' IDENTIFIER type_argument_list?
											|  predefined_type '.' IDENTIFIER type_argument_list?
											|  qualified_alias_member '.' IDENTIFIER type_argument_list? ;
		predefined_type						-> simple_type | 'object' | 'string' ;
		invocation_expression				-> primary_expression '(' argument_list? ')' ;
		element_access						-> primary_noarray_creation_expression '[' expression_list ']' ;
		expression_list						-> expression (',' expression)* ;
		this_access							-> 'this' ;
		base_access							-> 'base' '.' IDENTIFIER type_argument_list?
											|  'base' '[' expression_list ']' ;
		post_increment_expression			-> primary_expression '++' ;
		post_decrement_expression			-> primary_expression '--' ;
		object_creation_expression			-> 'new' type '(' argument_list? ')' ;
		array_creation_expression			-> 'new' non_array_type '[' expression_list ']' rank_specifiers? array_initializer?
											|  'new' array_type array_initializer ;
		delegate_creation_expression		-> 'new' delegate_type '(' expression ')' ;
		typeof_expression					-> 'typeof' '(' type ')'
											|  'typeof' '(' unbound_type_name ')'
											|  'typeof' '(' 'void' ')' ;
		unbound_type_name					-> IDENTIFIER generic_dimension_specifier?
											|  IDENTIFIER '::' IDENTIFIER generic_dimension_specifier?
											|  unbound_type_name '.' IDENTIFIER generic_dimension_specifier? ;
		generic_dimension_specifier			-> '<' commas? '>' ;
		commas								-> ','+ ;
		checked_expression					-> 'checked' '(' expression ')' ;
		unchecked_expression				-> 'unchecked' '(' expression ')' ;
		default_value_expression			-> 'default' '(' type ')' ;
		anonymous_method_expression			-> 'delegate' anonymous_method_signature? block ;
		anonymous_method_signature			-> '(' anonymous_method_parameter_list? ')' ;
		anonymous_method_parameter_list		-> anonymous_method_parameter (',' anonymous_method_parameter)* ;
		anonymous_method_parameter			-> parameter_modifier? type IDENTIFIER ;

		unary_expression					-> primary_expression
											| '+' unary_expression
											| '-' unary_expression
											| '~' unary_expression
											| '!' unary_expression
											| pre_increment_expression
											| pre_decrement_expression
											| cast_expression ;
		pre_increment_expression			-> '++' unary_expression ;
		pre_decrement_expression			-> '--' unary_expression ;
		cast_expression						-> '(' type ')' unary_expression ;
		multiplicative_expression			-> unary_expression
											|  multiplicative_expression '*' unary_expression
											|  multiplicative_expression '/' unary_expression
											|  multiplicative_expression '%' unary_expression ;
		additive_expression					-> multiplicative_expression
											|  additive_expression '+' multiplicative_expression
											|  additive_expression '-' multiplicative_expression ;
		shift_expression					-> additive_expression
											|  additive_expression '<<' additive_expression
											|  additive_expression right_shift additive_expression ;
		relational_expression				-> shift_expression
											|  relational_expression '<' shift_expression
											|  relational_expression '>' shift_expression
											|  relational_expression '<=' shift_expression
											|  relational_expression '>=' shift_expression
											|  relational_expression 'is' type
											|  relational_expression 'as' type ;
		equality_expression					-> relational_expression
											|  equality_expression '==' relational_expression
											|  equality_expression '!=' relational_expression ;
		and_expression						-> equality_expression
											|  and_expression '&' equality_expression ;
		exclusive_or_expression				-> and_expression
											|  exclusive_or_expression '^' and_expression ;
		inclusive_or_expression				-> exclusive_or_expression
											|  inclusive_or_expression '|' exclusive_or_expression ;
		conditional_and_expression			-> inclusive_or_expression
											|  conditional_and_expression '&&' inclusive_or_expression ;
		conditional_or_expression			-> conditional_and_expression
											|  conditional_or_expression '||' conditional_and_expression ;
		null_coalescing_expression			-> conditional_or_expression
											|  conditional_or_expression '??' null_coalescing_expression ;
		conditional_expression				-> null_coalescing_expression
											|  null_coalescing_expression '?' expression ':' expression ;
		assignment							-> unary_expression assignment_operator expression ;
		assignment_operator					-> '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | right_shift_assignment ;
		expression							-> assignment | conditional_expression ;
		constant_expression					-> expression ;
		boolean_expression					-> expression ;


		// A.2.5 Statements
		statement					-> labeled_statement
									|  declaration_statement
									|  embedded_statement ;
		embedded_statement			-> block
									|  empty_statement
									|  expression_statement
									|  selection_statement
									|  iteration_statement
									|  jump_statement
									|  try_statement
									|  checked_statement
									|  unchecked_statement
									|  lock_statement
									|  using_statement
									|  yield_statement ;
		block						-> '{' statement_list? '}' ;
		statement_list				-> statement+ ;
		empty_statement				-> ';' ;
		labeled_statement			-> IDENTIFIER ':' statement ;
		declaration_statement		-> local_variable_declaration ';'
									|  local_constant_declaration ';' ;
		local_variable_declaration	-> type local_variable_declarators ;
		local_variable_declarators	-> local_variable_declarator (',' local_variable_declarator)* ;
		local_variable_declarator	-> IDENTIFIER
									|  IDENTIFIER '=' local_variable_initializer ;
		local_variable_initializer	-> expression
									| array_initializer ;
		local_constant_declaration	-> 'const' type constant_declarators ;
		constant_declarators		-> constant_declarator (',' constant_declarator)* ;
		constant_declarator			-> IDENTIFIER '=' constant_expression ;
		expression_statement		-> statement_expression ';' ;
		statement_expression		-> invocation_expression
									|  object_creation_expression
									|  assignment
									|  pre_increment_expression
									|  pre_decrement_expression
									|  post_increment_expression
									|  post_decrement_expression ;
		selection_statement			-> if_statement
									|  switch_statement ;
		if_statement				-> 'if' '(' boolean_expression ')' embedded_statement
									|  'if' '(' boolean_expression ')' embedded_statement 'else' embedded_statement ;
		switch_statement			-> 'switch' '(' expression ')' switch_block ;
		switch_block				-> '{' switch_sections? '}' ;
		switch_sections				-> switch_section+ ;
		switch_section				-> switch_labels statement_list ;
		switch_labels				-> switch_label+ ;
		switch_label				-> 'case' constant_expression ':'
									|  'default' ':' ;
		iteration_statement			-> while_statement
									|  do_statement
									|  for_statement
									|  foreach_statement ;
		while_statement				-> 'while' '(' boolean_expression ')' embedded_statement ;
		do_statement				-> 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
		for_statement				-> 'for' '(' for_initializer? ';' for_condition? ';' for_iterator ')' embedded_statement ;
		for_initializer				-> local_variable_declaration | statement_expression+ ;
		for_condition				-> boolean_expression ;
		for_iterator				-> statement_expression_list ;
		statement_expression_list	-> statement_expression (',' statement_expression)* ;
		foreach_statement			-> 'foreach' '(' type IDENTIFIER 'in' expression ')' embedded_statement ;
		jump_statement				-> break_statement
									|  continue_statement
									|  goto_statement
									|  return_statement
									|  throw_statement ;
		break_statement				-> 'break' ';' ;
		continue_statement			-> 'continue' ';' ;
		goto_statement				-> 'goto' IDENTIFIER ';'
									|  'goto' 'case' constant_expression ';'
									|  'goto' 'default' ';' ;
		return_statement			-> 'return' expression? ';' ;
		throw_statement				-> 'throw' expression? ';' ;
		try_statement				-> 'try' block catch_clauses
									|  'try' block catch_clauses? finally_clause ;
		catch_clauses				-> specific_catch_clauses
									|  specific_catch_clauses? general_catch_clause ;
		specific_catch_clauses		-> specific_catch_clause+ ;
		specific_catch_clause		-> 'catch' '(' class_type IDENTIFIER? ')' block ;
		general_catch_clause		-> 'catch' block ;
		finally_clause				-> 'finally' block ;
		checked_statement			-> 'checked' block ;
		unchecked_statement			-> 'unchecked' block ;
		lock_statement				-> 'lock' '(' expression ')' block ;
		using_statement				-> 'using' '(' resource_acquisition ')' embedded_statement ;
		resource_acquisition		-> local_variable_declaration | expression ;
		yield_statement				-> 'yield' 'return' expression ';'
									|  'yield' 'break' ';' ;

		namespace_declaration		-> 'namespace' qualified_identifier namespace_body ';'? ;
		qualified_identifier		-> IDENTIFIER ('.' IDENTIFIER)* ;
		namespace_body				-> '{' extern_alias_directives? using_directives? namespace_member_declarations? '}' ;
		extern_alias_directives		-> extern_alias_directive+ ;
		extern_alias_directive		-> 'extern' 'alias' IDENTIFIER ';' ;
		using_directives			-> using_directive+ ;
		using_directive				-> using_alias_directive
									|  using_namespace_directive ;
		using_alias_directive		-> 'using' IDENTIFIER '=' namespace_or_type_name ';' ;
		using_namespace_directive	-> 'using' namespace_name ';' ;
		namespace_member_declarations-> namespace_member_declaration+ ;
		namespace_member_declaration-> namespace_declaration
									|  type_declaration ;
		type_declaration			-> class_declaration
									|  struct_declaration
									|  interface_declaration
									|  enum_declaration
									|  delegate_declaration ;
		qualified_alias_member		-> IDENTIFIER '::' IDENTIFIER type_argument_list? ;

		// A.2.6 Classes
		class_declaration			-> attributes? class_modifiers? 'partial'? 'class' IDENTIFIER type_parameter_list? class_base? type_parameter_constraints_clauses? class_body ';'? ;
		class_modifiers				-> class_modifier+ ;
		class_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'abstract' | 'sealed' | 'static' ;
		class_base					-> ':' (class_type
									|  interface_type_list
									|  class_type ',' interface_type_list ) ;
		interface_type_list			-> interface_type (',' interface_type)* ;
		class_body					-> '{' class_member_declarations? '}' ;
		class_member_declarations	-> class_member_declaration+ ;
		class_member_declaration	-> constant_declaration
									|  field_declaration
									|  method_declaration
									|  property_declaration
									|  event_declaration
									|  indexer_declaration
									|  operator_declaration
									|  constructor_declaration
									|  finalizer_declaration
									|  static_constructor_declaration
									|  type_declaration ;
		constant_declaration		-> attributes? constant_modifiers? 'const' type constant_declarators ';' ;
		constant_modifiers			-> constant_modifier ;
		constant_modifier			-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;
		constant_declarators		-> constant_declarator (',' constant_declarator)* ;
		constant_declarator			-> IDENTIFIER '=' constant_expression ;
		field_declaration			-> attributes? field_modifiers? type variable_declarators ';' ;
		field_modifiers				-> field_modifier+ ;
		field_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile' ;
		variable_declarators		-> variable_declarator (',' variable_declarator)* ;
		variable_declarator			-> IDENTIFIER
									|  IDENTIFIER '=' variable_initializer ;
		variable_initializer		-> expression
									|  array_initializer ;
		method_declaration			-> method_header method_body ;
		method_header				-> attributes? method_modifiers? return_type member_name type_parameter_list? '(' formal_parameter_list? ')' type_parameter_constraints_clauses? ;
		method_modifiers			-> method_modifier+ ;
		method_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
		return_type					-> type | 'void' ;
		member_name					-> IDENTIFIER
									|  interface_type '.' IDENTIFIER ;
		method_body					-> block | ';' ;
		formal_parameter_list		-> fixed_parameters
									|  fixed_parameters ',' parameter_array
									|  parameter_array ;
		fixed_parameters			-> fixed_parameter (',' fixed_parameters)* ;
		fixed_parameter				-> attributes? parameter_modifier? type IDENTIFIER ;
		parameter_modifier			-> 'ref' | 'out' ;
		parameter_array				-> attributes? 'params' array_type IDENTIFIER ;
		property_declaration		-> attributes? property_modifiers? type member_name '{' accessor_declarations '}' ;
		property_modifiers			-> property_modifier+ ;
		property_modifier			-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
		accessor_declarations		-> get_accessor_declaration set_accessor_declaration?
									|  set_accessor_declaration get_accessor_declaration? ;
		get_accessor_declaration	-> attributes? accessor_modifier? 'get' accessor_body ;
		set_accessor_declaration	-> attributes? accessor_modifier? 'set' accessor_body ;
		accessor_modifier			-> 'protected' | 'internal' | 'private' | 'protected' 'internal' | 'internal' 'protected' ;
		accessor_body				-> block | ';' ;
		event_declaration			-> attributes? event_modifiers? 'event' type variable_declarators ';'
									|  attributes? event_modifiers? 'event' type member_name '{' event_accessor_declarations '}' ;
		event_modifiers				-> event_modifier+ ;
		event_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
		event_accessor_declarations	-> add_accessor_declaration remove_accessor_declaration
									|  remove_accessor_declaration add_accessor_declaration ;
		add_accessor_declaration	-> attributes? 'add' block ;
		remove_accessor_declaration	-> attributes? 'remove' block ;
		indexer_declaration			-> attributes? indexer_modifiers? indexer_declarator '{' accessor_declarations '}' ;
		indexer_modifiers			-> indexer_modifier+ ;
		indexer_modifier			-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
		indexer_declarator			-> type 'this' '[' formal_parameter_list ']'
									|  type interface_type '.' 'this' '[' formal_parameter_list ']' ;
		operator_declaration		-> attributes? operator_modifiers operator_declarator operator_body ;
		operator_modifiers			-> operator_modifier+ ;
		operator_modifier			-> 'public' | 'static' | 'extern' ;
		operator_declarator			-> unary_operator_declarator
									|  binary_operator_declarator
									|  conversion_operator_declarator ;
		unary_operator_declarator	-> type 'operator' overloadable_unary_operator '(' type IDENTIFIER ')' ;
		overloadable_unary_operator	-> '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false' ;
		binary_operator_declarator	-> type 'operator' overloadable_binary_operator '(' type IDENTIFIER ',' type IDENTIFIER ')' ;
		overloadable_binary_operator-> '+' | '-' | '*' | '/' | '%'
									|  '&' | '|' | '^'
									|  '<<' | right_shift |
									|  '==' | '!=' | '>' | '>=' | '<' | '<=' ;
		conversion_operator_declarator-> 'implicit' 'operator' type '(' type IDENTIFIER ')'
									  |  'explicit' 'operator' type '(' type IDENTIFIER ')' ;
		operator_body				-> block | ';' ;
		constructor_declaration		-> attributes? constructor_modifiers? constructor_declarator constructor_body ;
		constructor_modifiers		-> constructor_modifier+ ;
		constructor_modifier		-> 'public' | 'protected' | 'internal' | 'private' | 'extern' ;
		constructor_declarator		-> IDENTIFIER '(' formal_parameter_list? ')' constructor_initializer? ;
		constructor_initializer		-> ':' 'base' '(' argument_list? ')'
									|  ':' 'this' '(' argument_list? ')' ;
		constructor_body			-> block | ';' ;
		static_constructor_declaration-> attributes? static_constructor_modifiers IDENTIFIER '(' ')' static_constructor_body ;
		static_constructor_modifiers-> 'extern'? 'static'
									|  'static' 'extern'? ;
		static_constructor_body		-> block | ';' ;
		finalizer_declaration		-> attributes? 'extern'? '~' IDENTIFIER '(' ')' finalizer_body ;
		finalizer_body				-> block | ';' ;

		// A.2.7 Structs
		struct_declaration			-> attributes? struct_modifiers? 'partial'? 'struct' IDENTIFIER type_parameter_list? struct_interfaces? type_parameter_constraints_clauses? struct_body ';'? ;
		struct_modifiers			-> struct_modifier+ ;
		struct_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;
		struct_interfaces			-> ':' interface_type_list ;
		struct_body					-> '{' struct_member_declarations? '}' ;
		struct_member_declarations	-> struct_member_declaration+ ;
		struct_member_declaration	-> constant_declaration
									|  field_declaration
									|  method_declaration
									|  property_declaration
									|  event_declaration
									|  indexer_declaration
									|  operator_declaration
									|  constructor_declaration
									|  static_constructor_declaration
									|  type_declaration ;

		// A.2.8 Arrays
		array_initializer			-> '{' variable_initializer_list? '}'
									|  '{' variable_initializer_list ',' '}' ;
		variable_initializer_list	-> variable_initializer (',' variable_initializer)* ;

		// A.2.9 Interfaces
		interface_declaration			-> attributes? interface_modifiers? 'partial'? 'interface' IDENTIFIER type_parameter_list? interface_base? type_parameter_constraints_clauses? interface_body ';'? ;
		interface_modifiers				-> interface_modifier+ ;
		interface_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;
		interface_base					-> ':' interface_type_list ;
		interface_body					-> '{' interface_member_declarations? '}' ;
		interface_member_declarations	-> interface_member_declaration+ ;
		interface_member_declaration	-> interface_method_declaration
										|  interface_property_declaration
										|  interface_event_declaration
										|  interface_indexer_declaration ;
		interface_method_declaration	-> attributes? 'new'? return_type IDENTIFIER type_parameter_list? '(' formal_parameter_list? ')' type_parameter_constraints_clauses? ';' ;
		interface_property_declaration	-> attributes? 'new'? type IDENTIFIER '{' interface_accessors '}' ;
		interface_accessors				-> attributes? 'get' ';'
										|  attributes? 'set' ';'
										|  attributes? 'get' ';' attributes? 'set' ';'
										|  attributes? 'set' ';' attributes? 'get' ';' ;
		interface_event_declaration		-> attributes? 'new'? 'event' type IDENTIFIER ';' ;
		interface_indexer_declaration	-> attributes? 'new'? type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}' ;

		// A.2.10 Enums
		enum_declaration			-> attributes? enum_modifiers? 'enum' IDENTIFIER enum_base? enum_body ';'? ;
		enum_base					-> ':' integral_type ;
		enum_body					-> '{' enum_member_declarations? '}'
									|  '{' enum_member_declarations ',' '}' ;
		enum_modifiers				-> enum_modifier+ ;
		enum_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;
		enum_member_declarations	-> enum_member_declaration (',' enum_member_declaration)* ;
		enum_member_declaration		-> attributes? IDENTIFIER
									|  attributes? IDENTIFIER '=' constant_expression ;

		// A.2.11 Delegates
		delegate_declaration		-> attributes? delegate_modifiers? 'delegate' return_type IDENTIFIER type_parameter_list? '(' formal_parameter_list? ')' type_parameter_constraints_clauses? ';' ;
		delegate_modifiers			-> delegate_modifier+ ;
		delegate_modifier			-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;

		// A.2.12 Attributes
		global_attributes					-> global_attribute_sections ;
		global_attribute_sections			-> global_attribute_section+ ;
		global_attribute_section			-> '[' global_attribute_target_specifier attribute_list ','? ']' ;
		global_attribute_target_specifier	-> global_attribute_target ':' ;
		global_attribute_target				-> IDENTIFIER | keyword ;
		attributes							-> attribute_sections ;
		attribute_sections					-> attribute_section+ ;
		attribute_section					-> '[' attribute_target_specifier? attribute_list ','? ']' ;
		attribute_target_specifier			-> attribute_target ':' ;
		attribute_target					-> IDENTIFIER | keyword ;
		attribute_list						-> attribute (',' attribute)* ;
		attribute							-> attribute_name attribute_arguments? ;
		attribute_name						-> type_name ;
		attribute_arguments					-> '(' positional_argument_list? ')'
											|  '(' positional_argument_list ',' named_argument_list ')'
											|  '(' named_argument_list ')' ;
		positional_argument_list			-> positional_argument (',' positional_argument)* ;
		positional_argument					-> attribute_argument_expression ;
		named_argument_list					-> named_argument (',' named_argument)* ;
		named_argument						-> IDENTIFIER '=' attribute_argument_expression ;
		attribute_argument_expression		-> expression ;

		// A.2.13 Generics
		type_parameter_list					-> '<' type_parameters '>' ;
		type_parameters						-> attributes? type_parameter (',' attributes? type_parameter)* ;
		type_parameter						-> IDENTIFIER ;
		type_argument_list					-> '<' type_arguments '>' ;
		type_arguments						-> type_argument (',' type_arguments)* ;
		type_argument						-> type ;
		type_parameter_constraints_clauses	-> type_parameter_constraints_clause+ ;
		type_parameter_constraints_clause	-> 'where' type_parameter ':' type_parameter_constraints ;
		type_parameter_constraints			-> primary_constraint
											|  secondary_constraints
											|  constructor_constraint
											|  primary_constraint ',' secondary_constraints
											|  primary_constraint ',' constructor_constraint
											|  secondary_constraints ',' constructor_constraint
											|  primary_constraint ',' secondary_constraints ',' constructor_constraint ;
		primary_constraint					-> class_type | 'class' | 'struct' ;
		secondary_constraints				-> secondary_constraint (',' secondary_constraints)* ;
		secondary_constraint				-> interface_type
											|  type_parameter ;
		constructor_constraint				-> 'new' '(' ')' ;

		// A.3 Grammar extensions for unsafe code
		class_modifier			-> 'unsafe' ;
		struct_modifier			-> 'unsafe' ;
		interface_modifier		-> 'unsafe' ;
		delegate_modifier		-> 'unsafe' ;
		field_modifier			-> 'unsafe' ;
		method_modifier			-> 'unsafe' ;
		property_modifier		-> 'unsafe' ;
		event_modifier			-> 'unsafe' ;
		indexer_modifier		-> 'unsafe' ;
		operator_modifier		-> 'unsafe' ;
		constructor_modifier	-> 'unsafe' ;
		finalizer_declaration			-> attributes? 'extern'? 'unsafe'? '~' IDENTIFIER '(' ')' finalizer_body
										|  attributes? 'unsafe'? 'extern'? '~' IDENTIFIER '(' ')' finalizer_body ;
		static_constructor_modifiers	-> 'extern'? 'unsafe'? 'static'
										|  'unsafe'? 'extern'? 'static'
										|  'static' 'extern'? 'unsafe'?
										|  'static' 'unsafe'? 'extern'?
										|  'extern'? 'static' 'unsafe'?
										|  'unsafe'? 'static' 'extern'? ;
		embedded_statement					-> unsafe_statement ;
		unsafe_statement					-> 'unsafe' block ;
		type								-> pointer_type ;
		pointer_type						-> unmanaged_type '*'
											|  'void' '*' ;
		unmanaged_type						-> type ;
		primary_noarray_creation_expression	-> sizeof_expression
											|  pointer_member_access
											|  pointer_element_access ;
		unary_expression					-> pointer_indirection_expression
											|  adressof_expression ;
		pointer_indirection_expression		-> '*' unary_expression ;
		pointer_member_access				-> primary_expression '->' IDENTIFIER type_argument_list? ;
		pointer_element_access				-> primary_noarray_creation_expression '[' expression ']' ;
		adressof_expression					-> '&' unary_expression ;
		sizeof_expression					-> 'sizeof' '(' unmanaged_type ')' ;
		embedded_statement					-> fixed_statement ;
		fixed_statement						-> 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
		fixed_pointer_declarators			-> fixed_pointer_declarator (',' fixed_pointer_declarator)* ;
		fixed_pointer_declarator			-> IDENTIFIER '=' fixed_pointer_initializer ;
		fixed_pointer_initializer			-> '&' variable_reference
											|  expression ;
		local_variable_initializer			-> stackalloc_initializer ;
		stackalloc_initializer				-> 'stackalloc' unmanaged_type '[' expression ']' ;
	}
}
