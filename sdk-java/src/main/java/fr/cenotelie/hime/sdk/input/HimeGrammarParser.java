/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.3.1.0
 */

package fr.cenotelie.hime.sdk.input;

import fr.cenotelie.hime.redist.Symbol;
import fr.cenotelie.hime.redist.parsers.LRkAutomaton;
import fr.cenotelie.hime.redist.parsers.LRkParser;

/**
 * Represents a parser
 */
class HimeGrammarParser extends LRkParser {
    /**
     * The automaton for this parser
     */
    private static final LRkAutomaton COMMON_AUTOMATON = LRkAutomaton.find(HimeGrammarParser.class, "HimeGrammarParser.bin");

    /**
     * Contains the constant IDs for the variables and virtuals in this parser
     */
    public static class ID {
        /**
         * The unique identifier for variable option
         */
        public static final int VARIABLE_OPTION = 0x001F;
        /**
         * The unique identifier for variable terminal_def_atom
         */
        public static final int VARIABLE_TERMINAL_DEF_ATOM = 0x0020;
        /**
         * The unique identifier for variable terminal_def_element
         */
        public static final int VARIABLE_TERMINAL_DEF_ELEMENT = 0x0021;
        /**
         * The unique identifier for variable terminal_def_cardinalilty
         */
        public static final int VARIABLE_TERMINAL_DEF_CARDINALILTY = 0x0022;
        /**
         * The unique identifier for variable terminal_def_repetition
         */
        public static final int VARIABLE_TERMINAL_DEF_REPETITION = 0x0023;
        /**
         * The unique identifier for variable terminal_def_fragment
         */
        public static final int VARIABLE_TERMINAL_DEF_FRAGMENT = 0x0024;
        /**
         * The unique identifier for variable terminal_def_restrict
         */
        public static final int VARIABLE_TERMINAL_DEF_RESTRICT = 0x0025;
        /**
         * The unique identifier for variable terminal_definition
         */
        public static final int VARIABLE_TERMINAL_DEFINITION = 0x0026;
        /**
         * The unique identifier for variable terminal_rule
         */
        public static final int VARIABLE_TERMINAL_RULE = 0x0027;
        /**
         * The unique identifier for variable terminal_fragment
         */
        public static final int VARIABLE_TERMINAL_FRAGMENT = 0x0028;
        /**
         * The unique identifier for variable terminal_context
         */
        public static final int VARIABLE_TERMINAL_CONTEXT = 0x0029;
        /**
         * The unique identifier for variable terminal_item
         */
        public static final int VARIABLE_TERMINAL_ITEM = 0x002A;
        /**
         * The unique identifier for variable rule_sym_action
         */
        public static final int VARIABLE_RULE_SYM_ACTION = 0x002B;
        /**
         * The unique identifier for variable rule_sym_virtual
         */
        public static final int VARIABLE_RULE_SYM_VIRTUAL = 0x002C;
        /**
         * The unique identifier for variable rule_sym_ref_params
         */
        public static final int VARIABLE_RULE_SYM_REF_PARAMS = 0x002D;
        /**
         * The unique identifier for variable rule_sym_ref_template
         */
        public static final int VARIABLE_RULE_SYM_REF_TEMPLATE = 0x002E;
        /**
         * The unique identifier for variable rule_sym_ref_simple
         */
        public static final int VARIABLE_RULE_SYM_REF_SIMPLE = 0x002F;
        /**
         * The unique identifier for variable rule_def_atom
         */
        public static final int VARIABLE_RULE_DEF_ATOM = 0x0030;
        /**
         * The unique identifier for variable rule_def_context
         */
        public static final int VARIABLE_RULE_DEF_CONTEXT = 0x0031;
        /**
         * The unique identifier for variable rule_def_element
         */
        public static final int VARIABLE_RULE_DEF_ELEMENT = 0x0032;
        /**
         * The unique identifier for variable rule_def_tree_action
         */
        public static final int VARIABLE_RULE_DEF_TREE_ACTION = 0x0033;
        /**
         * The unique identifier for variable rule_def_repetition
         */
        public static final int VARIABLE_RULE_DEF_REPETITION = 0x0034;
        /**
         * The unique identifier for variable rule_def_fragment
         */
        public static final int VARIABLE_RULE_DEF_FRAGMENT = 0x0035;
        /**
         * The unique identifier for variable rule_def_choice
         */
        public static final int VARIABLE_RULE_DEF_CHOICE = 0x0036;
        /**
         * The unique identifier for variable rule_definition
         */
        public static final int VARIABLE_RULE_DEFINITION = 0x0037;
        /**
         * The unique identifier for variable rule_template_params
         */
        public static final int VARIABLE_RULE_TEMPLATE_PARAMS = 0x0038;
        /**
         * The unique identifier for variable cf_rule_template
         */
        public static final int VARIABLE_CF_RULE_TEMPLATE = 0x0039;
        /**
         * The unique identifier for variable cf_rule_simple
         */
        public static final int VARIABLE_CF_RULE_SIMPLE = 0x003A;
        /**
         * The unique identifier for variable cf_rule
         */
        public static final int VARIABLE_CF_RULE = 0x003B;
        /**
         * The unique identifier for variable grammar_options
         */
        public static final int VARIABLE_GRAMMAR_OPTIONS = 0x003C;
        /**
         * The unique identifier for variable grammar_terminals
         */
        public static final int VARIABLE_GRAMMAR_TERMINALS = 0x003D;
        /**
         * The unique identifier for variable grammar_cf_rules
         */
        public static final int VARIABLE_GRAMMAR_CF_RULES = 0x003E;
        /**
         * The unique identifier for variable grammar_parency
         */
        public static final int VARIABLE_GRAMMAR_PARENCY = 0x003F;
        /**
         * The unique identifier for variable cf_grammar
         */
        public static final int VARIABLE_CF_GRAMMAR = 0x0040;
        /**
         * The unique identifier for variable file
         */
        public static final int VARIABLE_FILE = 0x0041;
        /**
         * The unique identifier for virtual range
         */
        public static final int VIRTUAL_RANGE = 0x0046;
        /**
         * The unique identifier for virtual concat
         */
        public static final int VIRTUAL_CONCAT = 0x004A;
        /**
         * The unique identifier for virtual emptypart
         */
        public static final int VIRTUAL_EMPTYPART = 0x0057;
    }

    /**
     * The collection of variables matched by this parser
     * <p>
     * The variables are in an order consistent with the automaton,
     * so that variable indices in the automaton can be used to retrieve the variables in this table
     */
    private static final Symbol[] variables = {
            new Symbol(0x001F, "option"),
            new Symbol(0x0020, "terminal_def_atom"),
            new Symbol(0x0021, "terminal_def_element"),
            new Symbol(0x0022, "terminal_def_cardinalilty"),
            new Symbol(0x0023, "terminal_def_repetition"),
            new Symbol(0x0024, "terminal_def_fragment"),
            new Symbol(0x0025, "terminal_def_restrict"),
            new Symbol(0x0026, "terminal_definition"),
            new Symbol(0x0027, "terminal_rule"),
            new Symbol(0x0028, "terminal_fragment"),
            new Symbol(0x0029, "terminal_context"),
            new Symbol(0x002A, "terminal_item"),
            new Symbol(0x002B, "rule_sym_action"),
            new Symbol(0x002C, "rule_sym_virtual"),
            new Symbol(0x002D, "rule_sym_ref_params"),
            new Symbol(0x002E, "rule_sym_ref_template"),
            new Symbol(0x002F, "rule_sym_ref_simple"),
            new Symbol(0x0030, "rule_def_atom"),
            new Symbol(0x0031, "rule_def_context"),
            new Symbol(0x0032, "rule_def_element"),
            new Symbol(0x0033, "rule_def_tree_action"),
            new Symbol(0x0034, "rule_def_repetition"),
            new Symbol(0x0035, "rule_def_fragment"),
            new Symbol(0x0036, "rule_def_choice"),
            new Symbol(0x0037, "rule_definition"),
            new Symbol(0x0038, "rule_template_params"),
            new Symbol(0x0039, "cf_rule_template"),
            new Symbol(0x003A, "cf_rule_simple"),
            new Symbol(0x003B, "cf_rule"),
            new Symbol(0x003C, "grammar_options"),
            new Symbol(0x003D, "grammar_terminals"),
            new Symbol(0x003E, "grammar_cf_rules"),
            new Symbol(0x003F, "grammar_parency"),
            new Symbol(0x0040, "cf_grammar"),
            new Symbol(0x0041, "file"),
            new Symbol(0x004B, "__V75"),
            new Symbol(0x004C, "__V76"),
            new Symbol(0x004D, "__V77"),
            new Symbol(0x0050, "__V80"),
            new Symbol(0x0053, "__V83"),
            new Symbol(0x0056, "__V86"),
            new Symbol(0x0058, "__V88"),
            new Symbol(0x0059, "__V89"),
            new Symbol(0x005A, "__V90"),
            new Symbol(0x005B, "__V91"),
            new Symbol(0x005C, "__V92"),
            new Symbol(0x005E, "__V94"),
            new Symbol(0x0060, "__V96"),
            new Symbol(0x0061, "__VAxiom")};
    /**
     * The collection of virtuals matched by this parser
     * <p>
     * The virtuals are in an order consistent with the automaton,
     * so that virtual indices in the automaton can be used to retrieve the virtuals in this table
     */
    private static final Symbol[] virtuals = {
            new Symbol(0x0046, "range"),
            new Symbol(0x004A, "concat"),
            new Symbol(0x0057, "emptypart")};

    /**
     * Initializes a new instance of the parser
     *
     * @param lexer The input lexer
     */
    public HimeGrammarParser(HimeGrammarLexer lexer) {
        super(COMMON_AUTOMATON, variables, virtuals, null, lexer);
    }
}
